<html lang="en"></html>
<head>
    <title>{{title}}</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="stylesheets/style.css" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
</head>
<body>
    <!-- Left Menu -->
<div class="nav-side-menu">
    <div class="brand">DEMO GOOGLE MAP API </div>
    <i class="fa fa-bars fa-2x toggle-btn" data-toggle="collapse" data-target="#menu-content"></i>
  
        <div class="menu-list">
  
            <ul id="menu-content" class="menu-content collapse">

                <li  data-toggle="collapse" data-target="#SerchMenu" class="collapsed active">
                    <a href="#">Search location </a>
                </li>
                <ul class="sub-menu collapse in" id="SerchMenu">
                    <div class="cell"><input id="pac-input" class="form-control" type="text" placeholder="Search location"></div>
                </ul>



                <li data-toggle="collapse" data-target="#DirectionMenu" class="collapsed active">
                  <a href="#"></i> Get Direction </a>
                </li>  
                <ul class="sub-menu collapse in" id="DirectionMenu">
                    <div class="cell">
                        <input id="origin-input" class="form-control" type="text" placeholder="Enter an origin location">
                    </div>
                    <div class="cell">
                        <input id="destination-input" class="form-control" type="text" placeholder="Enter a destination location">
                    </div>

                    <div class="cell">
                      <form id="mode-selector">
                      <label class="checkbox-inline" for="changemode-walking">
                          <input type="radio" name="type" id="changemode-walking" checked="checked">Walking
                      </label>

                      <label class="checkbox-inline" for="changemode-transit">
                          <input type="radio" name="type" id="changemode-transit" >Bus
                      </label>

                      <label class="checkbox-inline" for="changemode-driving">
                          <input type="radio" name="type" id="changemode-driving" >Driving
                      </label>
                      </form>


                  </div>
                </ul>
                <li class="collapsed active">
                  <a onclick="initMap()">
                    Get current location
                  </a>
                </li>
            </ul>
     </div>
</div>

<div id="map"></div>
<script>
    var map,infoWindow;
    var posCurrent;
    var currPlaceId = '';

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 10.7622916, lng: 106.6824567},
            zoom: 17
        });

        //Get current location
        infoWindow = new google.maps.InfoWindow;
        // Try HTML5 geolocation.
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                posCurrent = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var marker = new google.maps.Marker({
                    position:posCurrent ,
                    map: map
                });
                map.setCenter(posCurrent);
            }, function() {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }


        new AutocompleteDirectionsHandler(map);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
              currPlaceId = place.place_id;

            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              //icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            //get detail
              getPlaceDetails(map, currPlaceId);

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);

        });



    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
    }

    function getPlaceDetails(map, placeID){
        var infowindow = new google.maps.InfoWindow();
        var service = new google.maps.places.PlacesService(map);
        service.getDetails({
            placeId: placeID
        }, function(place, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                var marker = new google.maps.Marker({
                    map: map,
                    position: place.geometry.location
                });
                google.maps.event.addListener(marker, 'click', function() {
                    if(place.rating === null || typeof(place.rating) === 'undefined')
                        place.rating = 'Chưa có đánh giá nào';
                    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                            'Place ID: ' + place.place_id + '<br>' +
                            'Rating: ' + place.rating + '<br>' +
                            place.formatted_address + '</div>');
                    infowindow.open(map, this);
                });
            }
        });
    }

    function AutocompleteDirectionsHandler(map) {
        this.map = map;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'WALKING';
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        var modeSelector = document.getElementById('mode-selector');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, {placeIdOnly: true});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, {placeIdOnly: true});

        this.setupClickListener('changemode-walking', 'WALKING');
        this.setupClickListener('changemode-transit', 'TRANSIT');
        this.setupClickListener('changemode-driving', 'DRIVING');

        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');
      }

      // Sets a listener on a radio button to change the filter type on Places
      // Autocomplete.
      AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
        var radioButton = document.getElementById(id);
        var me = this;
        radioButton.addEventListener('click', function() {
          me.travelMode = mode;
          me.route();
        });
      };

      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function() {
          var place = autocomplete.getPlace();
          if (!place.place_id) {
            window.alert("Please select an option from the dropdown list.");
            return;
          }
          if (mode === 'ORIG') {
            me.originPlaceId = place.place_id;
          } else {
            me.destinationPlaceId = place.place_id;
          }
          me.route();
        });

      };

      AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.originPlaceId || !this.destinationPlaceId) {
          return;
        }
        var me = this;

        this.directionsService.route({
          origin: {'placeId': this.originPlaceId},
          destination: {'placeId': this.destinationPlaceId},
          travelMode: this.travelMode
        }, function(response, status) {
          if (status === 'OK') {
            me.directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      };
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAJUTKfWekYTp8s1nK8JQum0gTwCaNpElw&libraries=places&callback=initMap"async defer></script>

</body>

