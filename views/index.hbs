<html lang="en"></html>
<head>
    <title>{{title}}</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="stylesheets/style.css" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
</head>
<body>
    <!-- Left Menu -->
<div class="nav-side-menu">
    <div class="brand">DEMO GOOGLE MAP API </div>
    <i class="fa fa-bars fa-2x toggle-btn" data-toggle="collapse" data-target="#menu-content"></i>
  
        <div class="menu-list">
            <ul id="menu-content" class="menu-content collapse">
                <li  data-toggle="collapse" data-target="#SerchMenu" class="collapsed active">
                    <a href="#">Search location </a>
                </li>
                <ul class="sub-menu collapse in" id="SerchMenu">
                    <div class="cell"><input id="pac-input" class="form-control" type="text" placeholder="Search location"></div>
                </ul>
                <li  data-toggle="collapse" data-target="#nearby" class="collapsed active">
                    <a href="#">Suggest location </a>
                </li>
                <ul id="nearby"></ul>
            </ul>

     </div>
</div>

    <div id="map"></div>
    <div>
        <ul id="contents"></ul>
    </div>
<script>
    var map;
    var currPlaceId = '';

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 10.7622916, lng: 106.6824567},
            zoom: 17
        });
        //Auto-complete
        new AutocompleteDirectionsHandler(map);
        var geocoder = new google.maps.Geocoder();

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
            var location = geocodeAddress(geocoder, map);
            var places = searchBox.getPlaces();

            if (places.length == 0) {
            return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
            marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
              //console.log(place.geometry.location);
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
              currPlaceId = place.place_id;

            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              //icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
            });
            map.fitBounds(bounds);
        });
    }

    function geocodeAddress(geocoder) {
        var address = document.getElementById('pac-input').value;
        var location;
        console.log(address);
        geocoder.geocode({'address': address}, function (results, status) {
            if (status === 'OK') {
                var URL = "https://maps.googleapis.com/maps/api/geocode/json?place_id="+results[0].place_id+"&key=AIzaSyAJUTKfWekYTp8s1nK8JQum0gTwCaNpElw";
                $.ajax({
                    type:"GET",
                    dataType: 'json',
                    url: URL,
                    cache: false,
                    success: function (data) {
                        if(data){
                            console.log(data.results[0].geometry.location);
                            GetPictureByGeocode(data.results[0].geometry.location);
                            SearchNearBy(data.results[0].geometry.location);
                            return data.results[0].geometry.location;
                        }
                    }
                });
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
    function ShowNearbyLocation(locations) {
        var list = $('#nearby');
        locations.forEach(function (item) {
            list.append('<li><p>'+item.name+'</p></li>');
        })
    }
    function ShowPictures(pictures) {
        var list = $('#contents');
        pictures.forEach(function (item) {
            list.append('<img src="'+item.images.standard_resolution.url+'" alt="" width="200" height="200" >')
        })
    }
    function AutocompleteDirectionsHandler(map) {
        this.map = map;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'WALKING';
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        var modeSelector = document.getElementById('mode-selector');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, {placeIdOnly: true});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, {placeIdOnly: true});

        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');
      }
        function SearchNearBy(location) {
            var URL = "https://api.instagram.com/v1/locations/search?lat="+location.lat+"&lng="+location.lng+"&access_token=5856673019.ba4c844.0e2dcb7a588f4747a8181f42aed9ccc9&distance=200";
            $.ajax({
                type:"GET",
                dataType:"JSONP",
                headers:{
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'
                },
                url: URL,
                cache: false,
                success: function (data) {
                    if(data){
                        console.log("location")
                        console.log(data);
                        ShowNearbyLocation(data.data)
                    }
                }
            })
        }
      function GetPictureByGeocode(location) {
          var URL = "https://api.instagram.com/v1/media/search?lat="+location.lat+"&lng="+location.lng+"&access_token=5856673019.ba4c844.0e2dcb7a588f4747a8181f42aed9ccc9&distance=200";
          $.ajax({
              type:"GET",
              dataType:"JSONP",
              headers:{
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                  'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'
              },
              url: URL,
              cache: false,
              success: function (data) {
                  if(data){
                      console.log(data);
                    ShowPictures(data.data);
                  }
              }
          })
      }
      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function() {
          var place = autocomplete.getPlace();
          if (!place.place_id) {
            window.alert("Please select an option from the dropdown list.");
            return;
          }
          if (mode === 'ORIG') {
            me.originPlaceId = place.place_id;
          } else {
            me.destinationPlaceId = place.place_id;
          }
          me.route();
        });

      };

      AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.originPlaceId || !this.destinationPlaceId) {
          return;
        }
        var me = this;

        this.directionsService.route({
          origin: {'placeId': this.originPlaceId},
          destination: {'placeId': this.destinationPlaceId},
          travelMode: this.travelMode
        }, function(response, status) {
          if (status === 'OK') {
            me.directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      };
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAJUTKfWekYTp8s1nK8JQum0gTwCaNpElw&libraries=places&callback=initMap"async defer></script>

</body>

